#!/usr/bin/env python3
"""
Script optimizado para Railway que ejecuta peri√≥dicamente.
Se ejecuta, procesa los datos, y luego se duerme hasta la pr√≥xima ejecuci√≥n.
Ideal para Railway sin cron jobs nativos.
"""

import os
import sys
import time
import subprocess
import logging
from datetime import datetime, timedelta

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def run_script(script_name, description):
    """Ejecuta un script individual y maneja errores."""
    logger.info(f"üöÄ Ejecutando: {description}")
    
    try:
        result = subprocess.run(
            [sys.executable, f"scripts/{script_name}"],
            capture_output=True,
            text=True,
            cwd="/app",
            timeout=1800  # 30 minutos m√°ximo por script
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ {description} completado exitosamente")
            return True
        else:
            logger.error(f"‚ùå {description} fall√≥")
            logger.error(f"üì§ Error: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ {description} excedi√≥ el tiempo l√≠mite (30 min)")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error ejecutando {script_name}: {e}")
        return False

def run_all_scripts():
    """Ejecuta todos los scripts en secuencia."""
    start_time = datetime.now()
    
    logger.info("üîÑ Iniciando procesamiento de datos")
    logger.info(f"‚è∞ Inicio: {start_time.isoformat()}")
    
    # Lista de scripts a ejecutar en orden
    scripts_to_run = [
        ("faq_to_md.py", "Extracci√≥n de FAQs del PDF"),
        ("wp_chesterton.py", "Scraping de WordPress"),
        ("xml_to_db.py", "Procesamiento de XML y carga a base de datos"),
        ("chesterton_qdrant.py", "Indexaci√≥n en Qdrant")
    ]
    
    success_count = 0
    total_scripts = len(scripts_to_run)
    
    for script_name, description in scripts_to_run:
        if run_script(script_name, description):
            success_count += 1
        else:
            logger.warning(f"‚ö†Ô∏è Continuando con el siguiente script...")
    
    # Resumen final
    end_time = datetime.now()
    duration = end_time - start_time
    
    logger.info("üéâ Procesamiento completado")
    logger.info(f"‚è∞ Duraci√≥n total: {duration}")
    logger.info(f"üìä Resumen: {success_count}/{total_scripts} scripts ejecutados exitosamente")
    
    return success_count == total_scripts

def calculate_sleep_time():
    """Calcula cu√°nto tiempo dormir hasta la pr√≥xima ejecuci√≥n."""
    # Obtener intervalo desde variables de entorno (en horas)
    interval_hours = int(os.getenv("EXECUTION_INTERVAL_HOURS", "168"))  # 7 d√≠as por defecto
    
    # Calcular pr√≥xima ejecuci√≥n
    now = datetime.now()
    next_execution = now + timedelta(hours=interval_hours)
    
    logger.info(f"‚è∞ Pr√≥xima ejecuci√≥n programada: {next_execution.isoformat()}")
    logger.info(f"üò¥ Durmiendo {interval_hours} horas ({interval_hours * 3600} segundos)")
    
    return interval_hours * 3600

def main():
    """Funci√≥n principal optimizada para Railway."""
    logger.info("üöÄ Iniciando Microservicio Chesterton (Modo Scheduler para Railway)")
    
    # Verificar variables de entorno cr√≠ticas
    required_vars = ["GOOGLE_API_KEY", "QDRANT_URL", "QDRANT_API_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        logger.error("üí° Configura estas variables en Railway Dashboard")
        sys.exit(1)
    
    logger.info("‚úÖ Variables de entorno verificadas")
    
    # Obtener configuraci√≥n
    interval_hours = int(os.getenv("EXECUTION_INTERVAL_HOURS", "168"))  # 7 d√≠as
    logger.info(f"‚è∞ Configurado para ejecutar cada {interval_hours} horas")
    
    # Ejecutar inmediatamente la primera vez
    logger.info("üöÄ Ejecutando primera vez inmediatamente...")
    run_all_scripts()
    
    # Bucle principal
    while True:
        try:
            # Calcular tiempo de sue√±o
            sleep_seconds = calculate_sleep_time()
            
            # Dormir hasta la pr√≥xima ejecuci√≥n
            logger.info(f"üò¥ Durmiendo {sleep_seconds} segundos...")
            time.sleep(sleep_seconds)
            
            # Ejecutar procesamiento
            logger.info("üîÑ Despertando para ejecutar procesamiento...")
            run_all_scripts()
            
        except KeyboardInterrupt:
            logger.info("üõë Recibida se√±al de interrupci√≥n, terminando...")
            break
        except Exception as e:
            logger.error(f"‚ùå Error en el bucle principal: {e}")
            logger.info("üîÑ Reintentando en 1 hora...")
            time.sleep(3600)  # Esperar 1 hora antes de reintentar

if __name__ == "__main__":
    main() 